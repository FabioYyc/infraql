{
  "description": "An optional description of this resource. Provide this property when you create the resource.",
  "id": "Instance",
  "properties": {
    "canIpForward": {
      "description": "Allows this instance to send and receive packets with non-matching destination or source IPs. This is required if you plan to use this instance to forward routes. For more information, see Enabling IP Forwarding.",
      "type": "boolean"
    },
    "confidentialInstanceConfig": {
      "description": "A set of Confidential Instance options.",
      "id": "ConfidentialInstanceConfig",
      "properties": {
        "enableConfidentialCompute": {
          "description": "Defines whether the instance should have confidential compute enabled.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "cpuPlatform": {
      "description": "[Output Only] The CPU platform used by this instance.",
      "type": "string"
    },
    "creationTimestamp": {
      "description": "[Output Only] Creation timestamp in RFC3339 text format.",
      "type": "string"
    },
    "deletionProtection": {
      "description": "Whether the resource should be protected against deletion.",
      "type": "boolean"
    },
    "description": {
      "description": "An optional description of this resource. Provide this property when you create the resource.",
      "type": "string"
    },
    "disks": {
      "description": "Array of disks associated with this instance. Persistent disks must be created before you can assign them.",
      "items": {
        "description": "An instance-attached disk resource.",
        "id": "AttachedDisk",
        "properties": {
          "autoDelete": {
            "description": "Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).",
            "type": "boolean"
          },
          "boot": {
            "description": "Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.",
            "type": "boolean"
          },
          "deviceName": {
            "description": "Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance.\n\nIf not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.",
            "type": "string"
          },
          "diskEncryptionKey": {
            "id": "CustomerEncryptionKey",
            "properties": {
              "kmsKeyName": {
                "description": "The name of the encryption key that is stored in Google Cloud KMS.",
                "type": "string"
              },
              "kmsKeyServiceAccount": {
                "description": "The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used.",
                "type": "string"
              },
              "rawKey": {
                "description": "Specifies a 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to either encrypt or decrypt this resource.",
                "type": "string"
              },
              "sha256": {
                "description": "[Output only] The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "diskSizeGb": {
            "description": "The size of the disk in GB.",
            "format": "int64",
            "type": "string"
          },
          "guestOsFeatures": {
            "description": "A list of features to enable on the guest operating system. Applicable only for bootable images. Read  Enabling guest operating system features to see a list of available options.",
            "items": {
              "description": "Guest OS features.",
              "id": "GuestOsFeature",
              "properties": {
                "type": {
                  "description": "The ID of a supported feature. Read  Enabling guest operating system features to see a list of available options.",
                  "enum": [
                    "FEATURE_TYPE_UNSPECIFIED",
                    "MULTI_IP_SUBNET",
                    "SECURE_BOOT",
                    "SEV_CAPABLE",
                    "UEFI_COMPATIBLE",
                    "VIRTIO_SCSI_MULTIQUEUE",
                    "WINDOWS"
                  ],
                  "enumDescriptions": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "index": {
            "description": "[Output Only] A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number.",
            "format": "int32",
            "type": "integer"
          },
          "initializeParams": {
            "description": "[Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance.\n\nThis property is mutually exclusive with the source property; you can only define one or the other, but not both.",
            "id": "AttachedDiskInitializeParams",
            "properties": {
              "description": {
                "description": "An optional description. Provide this property when creating the disk.",
                "type": "string"
              },
              "diskName": {
                "description": "Specifies the disk name. If not specified, the default is to use the name of the instance. If a disk with the same name already exists in the given region, the existing disk is attached to the new instance and the new disk is not created.",
                "type": "string"
              },
              "diskSizeGb": {
                "description": "Specifies the size of the disk in base-2 GB. The size must be at least 10 GB. If you specify a sourceImage, which is required for boot disks, the default size is the size of the sourceImage. If you do not specify a sourceImage, the default disk size is 500 GB.",
                "format": "int64",
                "type": "string"
              },
              "diskType": {
                "description": "Specifies the disk type to use to create the instance. If not specified, the default is pd-standard, specified using the full URL. For example:\nhttps://www.googleapis.com/compute/v1/projects/project/zones/zone/diskTypes/pd-standard\n\n\nOther values include pd-ssd and local-ssd. If you define this field, you can provide either the full or partial URL. For example, the following are valid values:  \n- https://www.googleapis.com/compute/v1/projects/project/zones/zone/diskTypes/diskType \n- projects/project/zones/zone/diskTypes/diskType \n- zones/zone/diskTypes/diskType  Note that for InstanceTemplate, this is the name of the disk type, not URL.",
                "type": "string"
              },
              "labels": {
                "additionalProperties": {
                  "type": "string"
                },
                "description": "Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks.",
                "type": "object"
              },
              "onUpdateAction": {
                "description": "Specifies which action to take on instance update with this disk. Default is to use the existing disk.",
                "enum": [
                  "RECREATE_DISK",
                  "RECREATE_DISK_IF_SOURCE_CHANGED",
                  "USE_EXISTING_DISK"
                ],
                "enumDescriptions": [
                  "",
                  "",
                  ""
                ],
                "type": "string"
              },
              "resourcePolicies": {
                "description": "Resource policies applied to this disk for automatic snapshot creations. Specified using the full or partial URL. For instance template, specify only the resource policy name.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "sourceImage": {
                "description": "The source image to create this disk. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD.\n\nTo create a disk with one of the public operating system images, specify the image by its family name. For example, specify family/debian-9 to use the latest Debian 9 image:\nprojects/debian-cloud/global/images/family/debian-9\n\n\nAlternatively, use a specific version of a public operating system image:\nprojects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD\n\n\nTo create a disk with a custom image that you created, specify the image name in the following format:\nglobal/images/my-custom-image\n\n\nYou can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family/family-name:\nglobal/images/family/my-image-family\n\n\nIf the source image is deleted later, this field will not be set.",
                "type": "string"
              },
              "sourceImageEncryptionKey": {
                "id": "CustomerEncryptionKey",
                "properties": {
                  "kmsKeyName": {
                    "description": "The name of the encryption key that is stored in Google Cloud KMS.",
                    "type": "string"
                  },
                  "kmsKeyServiceAccount": {
                    "description": "The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used.",
                    "type": "string"
                  },
                  "rawKey": {
                    "description": "Specifies a 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to either encrypt or decrypt this resource.",
                    "type": "string"
                  },
                  "sha256": {
                    "description": "[Output only] The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "sourceSnapshot": {
                "description": "The source snapshot to create this disk. When creating a new instance, one of initializeParams.sourceSnapshot or initializeParams.sourceImage or disks.source is required except for local SSD.\n\nTo create a disk with a snapshot that you created, specify the snapshot name in the following format:\nglobal/snapshots/my-backup\n\n\nIf the source snapshot is deleted later, this field will not be set.",
                "type": "string"
              },
              "sourceSnapshotEncryptionKey": {
                "id": "CustomerEncryptionKey",
                "properties": {
                  "kmsKeyName": {
                    "description": "The name of the encryption key that is stored in Google Cloud KMS.",
                    "type": "string"
                  },
                  "kmsKeyServiceAccount": {
                    "description": "The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used.",
                    "type": "string"
                  },
                  "rawKey": {
                    "description": "Specifies a 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to either encrypt or decrypt this resource.",
                    "type": "string"
                  },
                  "sha256": {
                    "description": "[Output only] The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "interface": {
            "description": "Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance.",
            "enum": [
              "NVME",
              "SCSI"
            ],
            "enumDescriptions": [
              "",
              ""
            ],
            "type": "string"
          },
          "kind": {
            "default": "compute#attachedDisk",
            "description": "[Output Only] Type of the resource. Always compute#attachedDisk for attached disks.",
            "type": "string"
          },
          "licenses": {
            "description": "[Output Only] Any valid publicly visible licenses.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "mode": {
            "description": "The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode.",
            "enum": [
              "READ_ONLY",
              "READ_WRITE"
            ],
            "enumDescriptions": [
              "",
              ""
            ],
            "type": "string"
          },
          "shieldedInstanceInitialState": {
            "description": "Initial State for shielded instance, these are public keys which are safe to store in public",
            "id": "InitialStateConfig",
            "properties": {
              "dbs": {
                "description": "The Key Database (db).",
                "items": {
                  "id": "FileContentBuffer",
                  "properties": {
                    "content": {
                      "description": "The raw content in the secure keys file.",
                      "format": "byte",
                      "type": "string"
                    },
                    "fileType": {
                      "description": "The file type of source file.",
                      "enum": [
                        "BIN",
                        "UNDEFINED",
                        "X509"
                      ],
                      "enumDescriptions": [
                        "",
                        "",
                        ""
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "dbxs": {
                "description": "The forbidden key database (dbx).",
                "items": {
                  "id": "FileContentBuffer",
                  "properties": {
                    "content": {
                      "description": "The raw content in the secure keys file.",
                      "format": "byte",
                      "type": "string"
                    },
                    "fileType": {
                      "description": "The file type of source file.",
                      "enum": [
                        "BIN",
                        "UNDEFINED",
                        "X509"
                      ],
                      "enumDescriptions": [
                        "",
                        "",
                        ""
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "keks": {
                "description": "The Key Exchange Key (KEK).",
                "items": {
                  "id": "FileContentBuffer",
                  "properties": {
                    "content": {
                      "description": "The raw content in the secure keys file.",
                      "format": "byte",
                      "type": "string"
                    },
                    "fileType": {
                      "description": "The file type of source file.",
                      "enum": [
                        "BIN",
                        "UNDEFINED",
                        "X509"
                      ],
                      "enumDescriptions": [
                        "",
                        "",
                        ""
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "pk": {
                "id": "FileContentBuffer",
                "properties": {
                  "content": {
                    "description": "The raw content in the secure keys file.",
                    "format": "byte",
                    "type": "string"
                  },
                  "fileType": {
                    "description": "The file type of source file.",
                    "enum": [
                      "BIN",
                      "UNDEFINED",
                      "X509"
                    ],
                    "enumDescriptions": [
                      "",
                      "",
                      ""
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "source": {
            "description": "Specifies a valid partial or full URL to an existing Persistent Disk resource. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD.\n\nIf desired, you can also attach existing non-root persistent disks using this property. This field is only applicable for persistent disks.\n\nNote that for InstanceTemplate, specify the disk name, not the URL for the disk.",
            "type": "string"
          },
          "type": {
            "description": "Specifies the type of the disk, either SCRATCH or PERSISTENT. If not specified, the default is PERSISTENT.",
            "enum": [
              "PERSISTENT",
              "SCRATCH"
            ],
            "enumDescriptions": [
              "",
              ""
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "displayDevice": {
      "description": "A set of Display Device options",
      "id": "DisplayDevice",
      "properties": {
        "enableDisplay": {
          "description": "Defines whether the instance has Display enabled.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "fingerprint": {
      "description": "Specifies a fingerprint for this resource, which is essentially a hash of the instance's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update the instance. You must always provide an up-to-date fingerprint hash in order to update the instance.\n\nTo see the latest fingerprint, make get() request to the instance.",
      "format": "byte",
      "type": "string"
    },
    "guestAccelerators": {
      "description": "A list of the type and count of accelerator cards attached to the instance.",
      "items": {
        "description": "A specification of the type and number of accelerator cards attached to the instance.",
        "id": "AcceleratorConfig",
        "properties": {
          "acceleratorCount": {
            "description": "The number of the guest accelerator cards exposed to this instance.",
            "format": "int32",
            "type": "integer"
          },
          "acceleratorType": {
            "description": "Full or partial URL of the accelerator type resource to attach to this instance. For example: projects/my-project/zones/us-central1-c/acceleratorTypes/nvidia-tesla-p100 If you are creating an instance template, specify only the accelerator name. See GPUs on Compute Engine for a full list of accelerator types.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "hostname": {
      "description": "Specifies the hostname of the instance. The specified hostname must be RFC1035 compliant. If hostname is not specified, the default hostname is [INSTANCE_NAME].c.[PROJECT_ID].internal when using the global DNS, and [INSTANCE_NAME].[ZONE].c.[PROJECT_ID].internal when using zonal DNS.",
      "type": "string"
    },
    "id": {
      "description": "[Output Only] The unique identifier for the resource. This identifier is defined by the server.",
      "format": "uint64",
      "type": "string"
    },
    "kind": {
      "default": "compute#instance",
      "description": "[Output Only] Type of the resource. Always compute#instance for instances.",
      "type": "string"
    },
    "labelFingerprint": {
      "description": "A fingerprint for this request, which is essentially a hash of the label's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels.\n\nTo see the latest fingerprint, make get() request to the instance.",
      "format": "byte",
      "type": "string"
    },
    "labels": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Labels to apply to this instance. These can be later modified by the setLabels method.",
      "type": "object"
    },
    "lastStartTimestamp": {
      "description": "[Output Only] Last start timestamp in RFC3339 text format.",
      "type": "string"
    },
    "lastStopTimestamp": {
      "description": "[Output Only] Last stop timestamp in RFC3339 text format.",
      "type": "string"
    },
    "lastSuspendedTimestamp": {
      "description": "[Output Only] Last suspended timestamp in RFC3339 text format.",
      "type": "string"
    },
    "machineType": {
      "annotations": {
        "required": [
          "compute.instances.insert"
        ]
      },
      "description": "Full or partial URL of the machine type resource to use for this instance, in the format: zones/zone/machineTypes/machine-type. This is provided by the client when the instance is created. For example, the following is a valid partial url to a predefined machine type:\nzones/us-central1-f/machineTypes/n1-standard-1\n\n\nTo create a custom machine type, provide a URL to a machine type in the following format, where CPUS is 1 or an even number up to 32 (2, 4, 6, ... 24, etc), and MEMORY is the total memory for this instance. Memory must be a multiple of 256 MB and must be supplied in MB (e.g. 5 GB of memory is 5120 MB):\nzones/zone/machineTypes/custom-CPUS-MEMORY\n\n\nFor example: zones/us-central1-f/machineTypes/custom-4-5120 \n\nFor a full list of restrictions, read the Specifications for custom machine types.",
      "type": "string"
    },
    "metadata": {
      "description": "A metadata key/value entry.",
      "id": "Metadata",
      "properties": {
        "fingerprint": {
          "description": "Specifies a fingerprint for this request, which is essentially a hash of the metadata's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet.\n\nTo see the latest fingerprint, make a get() request to retrieve the resource.",
          "format": "byte",
          "type": "string"
        },
        "items": {
          "description": "Array of key/value pairs. The total size of all keys and values must be less than 512 KB.",
          "items": {
            "properties": {
              "key": {
                "annotations": {
                  "required": [
                    "compute.instances.insert",
                    "compute.projects.setCommonInstanceMetadata"
                  ]
                },
                "description": "Key for the metadata entry. Keys must conform to the following regexp: [a-zA-Z0-9-_]+, and be less than 128 bytes in length. This is reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project.",
                "pattern": "[a-zA-Z0-9-_]{1,128}",
                "type": "string"
              },
              "value": {
                "annotations": {
                  "required": [
                    "compute.instances.insert",
                    "compute.projects.setCommonInstanceMetadata"
                  ]
                },
                "description": "Value for the metadata entry. These are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on values is that their size must be less than or equal to 262144 bytes (256 KiB).",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "kind": {
          "default": "compute#metadata",
          "description": "[Output Only] Type of the resource. Always compute#metadata for metadata.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "minCpuPlatform": {
      "description": "Specifies a minimum CPU platform for the VM instance. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: \"Intel Haswell\" or minCpuPlatform: \"Intel Sandy Bridge\".",
      "type": "string"
    },
    "name": {
      "annotations": {
        "required": [
          "compute.instances.insert"
        ]
      },
      "description": "The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
      "pattern": "[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?",
      "type": "string"
    },
    "networkInterfaces": {
      "description": "An array of network configurations for this instance. These specify how interfaces are configured to interact with other network services, such as connecting to the internet. Multiple interfaces are supported per instance.",
      "items": {
        "description": "A network interface resource attached to an instance.",
        "id": "NetworkInterface",
        "properties": {
          "accessConfigs": {
            "description": "An array of configurations for this interface. Currently, only one access config, ONE_TO_ONE_NAT, is supported. If there are no accessConfigs specified, then this instance will have no external internet access.",
            "items": {
              "description": "An access configuration attached to an instance's network interface. Only one access config per instance is supported.",
              "id": "AccessConfig",
              "properties": {
                "kind": {
                  "default": "compute#accessConfig",
                  "description": "[Output Only] Type of the resource. Always compute#accessConfig for access configs.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of this access configuration. The default and recommended name is External NAT, but you can use any arbitrary string, such as My external IP or Network Access.",
                  "type": "string"
                },
                "natIP": {
                  "description": "An external IP address associated with this instance. Specify an unused static external IP address available to the project or leave this field undefined to use an IP from a shared ephemeral IP address pool. If you specify a static external IP address, it must live in the same region as the zone of the instance.",
                  "type": "string"
                },
                "networkTier": {
                  "description": "This signifies the networking tier used for configuring this access configuration and can only take the following values: PREMIUM, STANDARD.\n\nIf an AccessConfig is specified without a valid external IP address, an ephemeral IP will be created with this networkTier.\n\nIf an AccessConfig with a valid external IP address is specified, it must match that of the networkTier associated with the Address resource owning that IP.",
                  "enum": [
                    "PREMIUM",
                    "STANDARD"
                  ],
                  "enumDescriptions": [
                    "",
                    ""
                  ],
                  "type": "string"
                },
                "publicPtrDomainName": {
                  "description": "The DNS domain name for the public PTR record. You can set this field only if the `setPublicPtr` field is enabled.",
                  "type": "string"
                },
                "setPublicPtr": {
                  "description": "Specifies whether a public DNS 'PTR' record should be created to map the external IP address of the instance to a DNS domain name.",
                  "type": "boolean"
                },
                "type": {
                  "default": "ONE_TO_ONE_NAT",
                  "description": "The type of configuration. The default and only option is ONE_TO_ONE_NAT.",
                  "enum": [
                    "ONE_TO_ONE_NAT"
                  ],
                  "enumDescriptions": [
                    ""
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "aliasIpRanges": {
            "description": "An array of alias IP ranges for this network interface. You can only specify this field for network interfaces in VPC networks.",
            "items": {
              "description": "An alias IP range attached to an instance's network interface.",
              "id": "AliasIpRange",
              "properties": {
                "ipCidrRange": {
                  "description": "The IP alias ranges to allocate for this interface. This IP CIDR range must belong to the specified subnetwork and cannot contain IP addresses reserved by system or used by other network interfaces. This range may be a single IP address (such as 10.2.3.4), a netmask (such as /24) or a CIDR-formatted string (such as 10.1.2.0/24).",
                  "type": "string"
                },
                "subnetworkRangeName": {
                  "description": "The name of a subnetwork secondary IP range from which to allocate an IP alias range. If not specified, the primary range of the subnetwork is used.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "fingerprint": {
            "description": "Fingerprint hash of contents stored in this network interface. This field will be ignored when inserting an Instance or adding a NetworkInterface. An up-to-date fingerprint must be provided in order to update the NetworkInterface, otherwise the request will fail with error 412 conditionNotMet.",
            "format": "byte",
            "type": "string"
          },
          "ipv6Address": {
            "description": "[Output Only] An IPv6 internal network address for this network interface.",
            "type": "string"
          },
          "kind": {
            "default": "compute#networkInterface",
            "description": "[Output Only] Type of the resource. Always compute#networkInterface for network interfaces.",
            "type": "string"
          },
          "name": {
            "description": "[Output Only] The name of the network interface, which is generated by the server. For network devices, these are eth0, eth1, etc.",
            "type": "string"
          },
          "network": {
            "description": "URL of the network resource for this instance. When creating an instance, if neither the network nor the subnetwork is specified, the default network global/networks/default is used; if the network is not specified but the subnetwork is specified, the network is inferred.\n\nIf you specify this property, you can specify the network as a full or partial URL. For example, the following are all valid URLs:  \n- https://www.googleapis.com/compute/v1/projects/project/global/networks/network \n- projects/project/global/networks/network \n- global/networks/default",
            "type": "string"
          },
          "networkIP": {
            "description": "An IPv4 internal IP address to assign to the instance for this network interface. If not specified by the user, an unused internal IP is assigned by the system.",
            "type": "string"
          },
          "subnetwork": {
            "description": "The URL of the Subnetwork resource for this instance. If the network resource is in legacy mode, do not specify this field. If the network is in auto subnet mode, specifying the subnetwork is optional. If the network is in custom subnet mode, specifying the subnetwork is required. If you specify this field, you can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs:  \n- https://www.googleapis.com/compute/v1/projects/project/regions/region/subnetworks/subnetwork \n- regions/region/subnetworks/subnetwork",
            "type": "string"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "privateIpv6GoogleAccess": {
      "description": "The private IPv6 google access type for the VM. If not specified, use  INHERIT_FROM_SUBNETWORK as default.",
      "enum": [
        "ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE",
        "ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE",
        "INHERIT_FROM_SUBNETWORK"
      ],
      "enumDescriptions": [
        "",
        "",
        ""
      ],
      "type": "string"
    },
    "reservationAffinity": {
      "description": "Specifies the reservations that this instance can consume from.",
      "id": "ReservationAffinity",
      "properties": {
        "consumeReservationType": {
          "description": "Specifies the type of reservation from which this instance can consume resources: ANY_RESERVATION (default), SPECIFIC_RESERVATION, or NO_RESERVATION. See  Consuming reserved instances for examples.",
          "enum": [
            "ANY_RESERVATION",
            "NO_RESERVATION",
            "SPECIFIC_RESERVATION",
            "UNSPECIFIED"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "key": {
          "description": "Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify googleapis.com/reservation-name as the key and specify the name of your reservation as its value.",
          "type": "string"
        },
        "values": {
          "description": "Corresponds to the label values of a reservation resource.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "resourcePolicies": {
      "description": "Resource policies applied to this instance.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "scheduling": {
      "description": "Sets the scheduling options for an Instance. NextID: 13",
      "id": "Scheduling",
      "properties": {
        "automaticRestart": {
          "description": "Specifies whether the instance should be automatically restarted if it is terminated by Compute Engine (not terminated by a user). You can only set the automatic restart option for standard instances. Preemptible instances cannot be automatically restarted.\n\nBy default, this is set to true so an instance is automatically restarted if it is terminated by Compute Engine.",
          "type": "boolean"
        },
        "minNodeCpus": {
          "description": "The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node.",
          "format": "int32",
          "type": "integer"
        },
        "nodeAffinities": {
          "description": "A set of node affinity and anti-affinity configurations. Refer to Configuring node affinity for more information. Overrides reservationAffinity.",
          "items": {
            "description": "Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled.",
            "id": "SchedulingNodeAffinity",
            "properties": {
              "key": {
                "description": "Corresponds to the label key of Node resource.",
                "type": "string"
              },
              "operator": {
                "description": "Defines the operation of node selection. Valid operators are IN for affinity and NOT_IN for anti-affinity.",
                "enum": [
                  "IN",
                  "NOT_IN",
                  "OPERATOR_UNSPECIFIED"
                ],
                "enumDescriptions": [
                  "",
                  "",
                  ""
                ],
                "type": "string"
              },
              "values": {
                "description": "Corresponds to the label values of Node resource.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "onHostMaintenance": {
          "description": "Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is TERMINATE. For more information, see Setting Instance Scheduling Options.",
          "enum": [
            "MIGRATE",
            "TERMINATE"
          ],
          "enumDescriptions": [
            "",
            ""
          ],
          "type": "string"
        },
        "preemptible": {
          "description": "Defines whether the instance is preemptible. This can only be set during instance creation or while the instance is stopped and therefore, in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "selfLink": {
      "description": "[Output Only] Server-defined URL for this resource.",
      "type": "string"
    },
    "serviceAccounts": {
      "description": "A list of service accounts, with their specified scopes, authorized for this instance. Only one service account per VM instance is supported.\n\nService accounts generate access tokens that can be accessed through the metadata server and used to authenticate applications on the instance. See Service Accounts for more information.",
      "items": {
        "description": "A service account.",
        "id": "ServiceAccount",
        "properties": {
          "email": {
            "description": "Email address of the service account.",
            "type": "string"
          },
          "scopes": {
            "description": "The list of scopes to be made available for this service account.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "shieldedInstanceConfig": {
      "description": "A set of Shielded Instance options.",
      "id": "ShieldedInstanceConfig",
      "properties": {
        "enableIntegrityMonitoring": {
          "description": "Defines whether the instance has integrity monitoring enabled. Enabled by default.",
          "type": "boolean"
        },
        "enableSecureBoot": {
          "description": "Defines whether the instance has Secure Boot enabled. Disabled by default.",
          "type": "boolean"
        },
        "enableVtpm": {
          "description": "Defines whether the instance has the vTPM enabled. Enabled by default.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "shieldedInstanceIntegrityPolicy": {
      "description": "The policy describes the baseline against which Instance boot integrity is measured.",
      "id": "ShieldedInstanceIntegrityPolicy",
      "properties": {
        "updateAutoLearnPolicy": {
          "description": "Updates the integrity policy baseline using the measurements from the VM instance's most recent boot.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "startRestricted": {
      "description": "[Output Only] Whether a VM has been restricted for start because Compute Engine has detected suspicious activity.",
      "type": "boolean"
    },
    "status": {
      "description": "[Output Only] The status of the instance. One of the following values: PROVISIONING, STAGING, RUNNING, STOPPING, SUSPENDING, SUSPENDED, REPAIRING, and TERMINATED. For more information about the status of the instance, see  Instance life cycle.",
      "enum": [
        "DEPROVISIONING",
        "PROVISIONING",
        "REPAIRING",
        "RUNNING",
        "STAGING",
        "STOPPED",
        "STOPPING",
        "SUSPENDED",
        "SUSPENDING",
        "TERMINATED"
      ],
      "enumDescriptions": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ],
      "type": "string"
    },
    "statusMessage": {
      "description": "[Output Only] An optional, human-readable explanation of the status.",
      "type": "string"
    },
    "tags": {
      "description": "A set of instance tags.",
      "id": "Tags",
      "properties": {
        "fingerprint": {
          "description": "Specifies a fingerprint for this request, which is essentially a hash of the tags' contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update tags. You must always provide an up-to-date fingerprint hash in order to update or change tags.\n\nTo see the latest fingerprint, make get() request to the instance.",
          "format": "byte",
          "type": "string"
        },
        "items": {
          "description": "An array of tags. Each tag must be 1-63 characters long, and comply with RFC1035.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "zone": {
      "description": "[Output Only] URL of the zone where the instance resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.",
      "type": "string"
    }
  },
  "type": "object"
}
